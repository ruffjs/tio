{
 "swagger": "2.0",
 "info": {
  "description": "A tiny iothub core\n\nBuild Info:\n- Version: 1.2.0\n- GitCommit: 7a0bc98597bba2cd9272718311e9ae5f4ca91700\n",
  "title": "tio",
  "version": "1.2.0"
 },
 "paths": {
  "/api/v1/jobs": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "query",
    "parameters": [
     {
      "enum": [
       "WAITING",
       "IN_PROGRESS",
       "CANCELED",
       "COMPLETED",
       "CANCELING",
       "REMOVING"
      ],
      "type": "string",
      "description": "job status",
      "name": "status",
      "in": "query"
     },
     {
      "type": "string",
      "description": "job operation",
      "name": "operation",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 1,
      "description": "page index, from 1",
      "name": "pageIndex",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 10,
      "description": "page size, from 1",
      "name": "pageSize",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.Page]"
      }
     }
    }
   },
   "post": {
    "description": "Operation can be :\n- Direct method, with prefix \"$directMethod/\" , like \"$directMethod/turnOnLight\"\n- Update shadow, with prefix \"$updateShadow/\" , like \"$updateShadow/reportConfig\"\n- Custom, with no \"$\" prefix, like \"turnOnLight\"\n\nJob doc:\n- When operation is kind of direct method, job doc should like: {\"method\":\"xxx\", \"responseTimeout\": 5, \"data\":{}}\n- When operation is kind of update shadow, job doc should like: {\"state\":{\"desired\": {\"xxx\":\"yy\"}}}\n- When operation custom, job doc can be any json object, eg: {\"xxx\": \"yyy\"}",
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "create",
    "parameters": [
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/job.CreateReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.Detail]"
      }
     }
    }
   }
  },
  "/api/v1/jobs/{jobId}": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "get",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.Detail]"
      }
     }
    }
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "update",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/job.UpdateReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   },
   "delete": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "delete",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "type": "boolean",
      "default": false,
      "name": "force",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/jobs/{jobId}/cancel": {
   "put": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "cancel",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "type": "boolean",
      "default": false,
      "name": "force",
      "in": "query"
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/job.CancelReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/jobs/{jobId}/tasks": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "query-job-tasks",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "enum": [
       "QUEUED",
       "SENT",
       "IN_PROGRESS",
       "FAILED",
       "SUCCEEDED",
       "REJECTED",
       "TIMED_OUT",
       "CANCELED"
      ],
      "type": "string",
      "description": "task status",
      "name": "status",
      "in": "query"
     },
     {
      "type": "string",
      "description": "job operation",
      "name": "operation",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 1,
      "description": "page index, from 1",
      "name": "pageIndex",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 10,
      "description": "page size, from 1",
      "name": "pageSize",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.TaskPage]"
      }
     }
    }
   }
  },
  "/api/v1/mqttBroker/clients/{clientId}": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "mqttBroker"
    ],
    "summary": "Kick off the client from the mqtt broker",
    "operationId": "delete-client",
    "parameters": [
     {
      "type": "string",
      "name": "clientId",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.pkg.restapi.H]"
      }
     }
    }
   }
  },
  "/api/v1/mqttBroker/embed/stats": {
   "get": {
    "description": "The embedded mqtt broker of tio is used `https://github.com/mochi-mqtt/server`. This api is for getting it's stats info",
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "mqttBroker"
    ],
    "summary": "Get embedded mqtt broker stats info",
    "operationId": "embed-stats",
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[github.com.mochi-mqtt.server.v2.system.Info]"
      }
     }
    }
   }
  },
  "/api/v1/things": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "things"
    ],
    "summary": "get all things",
    "operationId": "query",
    "parameters": [
     {
      "type": "boolean",
      "description": "whether return authValue field",
      "name": "withAuthValue",
      "in": "query"
     },
     {
      "type": "boolean",
      "description": "whether return fields of status",
      "name": "withStatus",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 1,
      "description": "page index, from 1",
      "name": "pageIndex",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 10,
      "description": "page size, from 1",
      "name": "pageSize",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.pkg.model.PageData[ruff.io.tio.thing.ThingWithStatus]]"
      }
     }
    }
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "things"
    ],
    "summary": "create thing",
    "operationId": "create-one",
    "parameters": [
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/api.CreateReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.thing.Thing]"
      }
     }
    }
   }
  },
  "/api/v1/things/batch": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "things"
    ],
    "summary": "create things",
    "operationId": "create-batch",
    "parameters": [
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "type": "array",
       "items": {
        "$ref": "#/definitions/api.CreateReq"
       }
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.thing.api.CreateBatchResp]"
      }
     }
    }
   }
  },
  "/api/v1/things/shadows/query": {
   "post": {
    "description": "SQL query string like : select * from shadow where \\`tags.zone\\` = 'Shanghai'.\n\nJSON path (eg: tags.Shanghai) must be surrounded with `` .\n\nThese fields are queryable: \n  - `thingId, createdAt, updatedAt, version`\n  - filed about connection: `connected, connectedAt, disconnectedAt, remoteAddr` \n  - field under `tags, state.reported, state.desired` , eg: tags.zone, state.reported.loc.lat, sate.desired.x.y\n\nThese fields can be used as sorting fields:\n  - `thingId, createdAt, updatedAt`\n",
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "shadows"
    ],
    "operationId": "query",
    "parameters": [
     {
      "type": "string",
      "default": 1,
      "name": "pageIndex",
      "in": "query"
     },
     {
      "type": "string",
      "default": 10,
      "name": "pageSize",
      "in": "query"
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/api.ShadowQuery"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp%5Bruff.io.tio.pkg.model.PageData%5Binterface%20%7B%7D%5D%5D"
      }
     }
    }
   }
  },
  "/api/v1/things/{id}": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "things"
    ],
    "operationId": "get-one",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.thing.Thing]"
      }
     }
    }
   },
   "delete": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "things"
    ],
    "operationId": "delete-one",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/things/{id}/methods/{name}": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "shadows"
    ],
    "summary": "invoke thing direct method",
    "operationId": "invoke-direct-method",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "description": "method name",
      "name": "name",
      "in": "path",
      "required": true
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/api.MethodInvokeReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.shadow.api.MethodInvokeResp]"
      }
     }
    }
   }
  },
  "/api/v1/things/{id}/shadows/default": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "shadows"
    ],
    "summary": "get shadow",
    "operationId": "get-one",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.shadow.ShadowWithStatus]"
      }
     }
    }
   }
  },
  "/api/v1/things/{id}/shadows/default/state/desired": {
   "put": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "shadows"
    ],
    "summary": "set shadow desired state",
    "operationId": "set-state-desired",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/shadow.StateReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/things/{id}/shadows/tags": {
   "put": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "shadows"
    ],
    "summary": "set shadow tags property",
    "operationId": "set-tags",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/shadow.TagsReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/things/{thingId}/jobs/{jobId}/cancel": {
   "put": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "cancel-task",
    "parameters": [
     {
      "type": "string",
      "name": "thingId",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "type": "boolean",
      "default": false,
      "name": "force",
      "in": "query"
     },
     {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/job.CancelTaskReq"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/things/{thingId}/jobs/{jobId}/task/{taskId}": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "summary": "get detail of task",
    "operationId": "get-task",
    "parameters": [
     {
      "type": "string",
      "name": "thingId",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "taskId",
      "in": "path",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.Task]"
      }
     }
    }
   },
   "delete": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "delete-task",
    "parameters": [
     {
      "type": "string",
      "name": "jobId",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "thingId",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "taskId",
      "in": "path",
      "required": true
     },
     {
      "type": "boolean",
      "default": false,
      "name": "force",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[string]"
      }
     }
    }
   }
  },
  "/api/v1/things/{thingId}/tasks": {
   "get": {
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "jobs"
    ],
    "operationId": "query-job-tasks",
    "parameters": [
     {
      "type": "string",
      "name": "thingId",
      "in": "path",
      "required": true
     },
     {
      "enum": [
       "QUEUED",
       "SENT",
       "IN_PROGRESS",
       "FAILED",
       "SUCCEEDED",
       "REJECTED",
       "TIMED_OUT",
       "CANCELED"
      ],
      "type": "string",
      "description": "task status",
      "name": "status",
      "in": "query"
     },
     {
      "type": "string",
      "description": "job operation",
      "name": "operation",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 1,
      "description": "page index, from 1",
      "name": "pageIndex",
      "in": "query"
     },
     {
      "type": "integer",
      "default": 10,
      "description": "page size, from 1",
      "name": "pageSize",
      "in": "query"
     }
    ],
    "responses": {
     "200": {
      "description": "OK",
      "schema": {
       "$ref": "#/definitions/rest.Resp[ruff.io.tio.job.TaskPage]"
      }
     }
    }
   }
  },
  "/private/api/things/{id}/topicAcl": {
   "get": {
    "description": "for emqx integration topic acl",
    "consumes": [
     "application/json"
    ],
    "produces": [
     "application/json"
    ],
    "tags": [
     "private"
    ],
    "operationId": "topic-acl",
    "parameters": [
     {
      "type": "string",
      "description": "thing id",
      "name": "id",
      "in": "path",
      "required": true
     },
     {
      "type": "string",
      "name": "topic",
      "in": "query",
      "required": true
     },
     {
      "enum": [
       "publish",
       "subscribe"
      ],
      "type": "string",
      "name": "action",
      "in": "query",
      "required": true
     }
    ],
    "responses": {
     "200": {
      "description": "OK"
     }
    }
   }
  }
 },
 "definitions": {
  "api.CreateBatchResp": {
   "required": [
    "invalidList",
    "validList"
   ],
   "properties": {
    "invalidList": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/api.InvalidCreate"
     }
    },
    "validList": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/thing.Thing"
     }
    }
   }
  },
  "api.CreateReq": {
   "required": [
    "thingId",
    "password"
   ],
   "properties": {
    "password": {
     "type": "string"
    },
    "thingId": {
     "type": "string"
    }
   }
  },
  "api.InvalidCreate": {
   "required": [
    "thingId",
    "errorCode",
    "errorMsg"
   ],
   "properties": {
    "errorCode": {
     "type": "string"
    },
    "errorMsg": {
     "type": "string"
    },
    "thingId": {
     "type": "string"
    }
   }
  },
  "api.MethodInvokeReq": {
   "required": [
    "connTimeout",
    "respTimeout",
    "data"
   ],
   "properties": {
    "connTimeout": {
     "description": "waiting time for the thing to come online, in seconds",
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "description": "Any legal json data, including basic types, array, object, etc.",
     "$ref": "#/definitions/api.MethodInvokeReq.data"
    },
    "respTimeout": {
     "description": "waiting time for the thing to response, in seconds",
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "api.MethodInvokeReq.data": {},
  "api.MethodInvokeResp": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/api.MethodInvokeResp.data"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "api.MethodInvokeResp.data": {},
  "api.ShadowQuery": {
   "required": [
    "query"
   ],
   "properties": {
    "query": {
     "description": "SQL-like query string",
     "type": "string",
     "default": "select * from shadow"
    }
   }
  },
  "job.CancelReq": {
   "properties": {
    "comment": {
     "type": "string"
    },
    "reasonCode": {
     "type": "string"
    }
   }
  },
  "job.CancelTaskReq": {
   "properties": {
    "statusDetails": {
     "$ref": "#/definitions/job.StatusDetails"
    },
    "version": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.CreateReq": {
   "required": [
    "targetConfig",
    "operation"
   ],
   "properties": {
    "description": {
     "type": "string"
    },
    "jobDoc": {
     "type": "object"
    },
    "jobId": {
     "type": "string"
    },
    "operation": {
     "description": "system operation: \"$directMethod\" or \"$updateShadow\", and custom operation without \"$\" prefix",
     "type": "string"
    },
    "retryConfig": {
     "$ref": "#/definitions/job.RetryConfig"
    },
    "rolloutConfig": {
     "$ref": "#/definitions/job.RolloutConfig"
    },
    "schedulingConfig": {
     "$ref": "#/definitions/job.SchedulingConfig"
    },
    "targetConfig": {
     "$ref": "#/definitions/job.TargetConfig"
    },
    "timeoutConfig": {
     "$ref": "#/definitions/job.TimeoutConfig"
    }
   }
  },
  "job.Detail": {
   "required": [
    "jobId",
    "targetConfig",
    "jobDoc",
    "description",
    "operation",
    "schedulingConfig",
    "rolloutConfig",
    "retryConfig",
    "timeoutConfig",
    "status",
    "forceCanceled",
    "processDetails",
    "comment",
    "reasonCode",
    "startedAt",
    "completedAt",
    "updatedAt",
    "createdAt",
    "version"
   ],
   "properties": {
    "comment": {
     "type": "string"
    },
    "completedAt": {
     "type": "integer",
     "format": "int64"
    },
    "createdAt": {
     "type": "integer",
     "format": "int64"
    },
    "description": {
     "type": "string"
    },
    "forceCanceled": {
     "type": "boolean"
    },
    "jobDoc": {
     "type": "object"
    },
    "jobId": {
     "type": "string"
    },
    "operation": {
     "type": "string"
    },
    "processDetails": {
     "$ref": "#/definitions/job.ProcessDetails"
    },
    "reasonCode": {
     "type": "string"
    },
    "retryConfig": {
     "$ref": "#/definitions/job.RetryConfig"
    },
    "rolloutConfig": {
     "$ref": "#/definitions/job.RolloutConfig"
    },
    "schedulingConfig": {
     "$ref": "#/definitions/job.SchedulingConfig"
    },
    "startedAt": {
     "type": "integer",
     "format": "int64"
    },
    "status": {
     "type": "string",
     "enum": [
      "WAITING",
      "IN_PROGRESS",
      "CANCELING",
      "CANCELED",
      "COMPLETED",
      "REMOVING"
     ]
    },
    "targetConfig": {
     "$ref": "#/definitions/job.TargetConfig"
    },
    "timeoutConfig": {
     "$ref": "#/definitions/job.TimeoutConfig"
    },
    "updatedAt": {
     "type": "integer",
     "format": "int64"
    },
    "version": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.Page": {
   "required": [
    "total",
    "content"
   ],
   "properties": {
    "content": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/job.Summary"
     }
    },
    "total": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "job.ProcessDetails": {
   "required": [
    "queued",
    "sent",
    "inProgress",
    "failed",
    "succeeded",
    "canceled",
    "rejected",
    "timedOut"
   ],
   "properties": {
    "canceled": {
     "type": "integer",
     "format": "int32"
    },
    "failed": {
     "type": "integer",
     "format": "int32"
    },
    "inProgress": {
     "type": "integer",
     "format": "int32"
    },
    "queued": {
     "type": "integer",
     "format": "int32"
    },
    "rejected": {
     "type": "integer",
     "format": "int32"
    },
    "sent": {
     "type": "integer",
     "format": "int32"
    },
    "succeeded": {
     "type": "integer",
     "format": "int32"
    },
    "timedOut": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.RetryConfig": {
   "required": [
    "criteriaList"
   ],
   "properties": {
    "criteriaList": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/job.RetryConfigItem"
     }
    }
   }
  },
  "job.RetryConfigItem": {
   "required": [
    "failureType",
    "numberOfRetries"
   ],
   "properties": {
    "failureType": {
     "type": "string",
     "enum": [
      "FAILED ",
      " TIMED_OUT ",
      " ALL"
     ]
    },
    "numberOfRetries": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.RolloutConfig": {
   "required": [
    "MaxPerMinute"
   ],
   "properties": {
    "MaxPerMinute": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.SchedulingConfig": {
   "required": [
    "startTime",
    "endTime",
    "endBehavior"
   ],
   "properties": {
    "endBehavior": {
     "type": "string",
     "enum": [
      "STOP_ROLLOUT ",
      " CANCEL ",
      " FORCE_CANCEL"
     ]
    },
    "endTime": {
     "type": "string",
     "format": "date-time"
    },
    "startTime": {
     "type": "string",
     "format": "date-time"
    }
   }
  },
  "job.StatusDetails": {
   "type": "object"
  },
  "job.Summary": {
   "required": [
    "jobId",
    "operation",
    "status",
    "startedAt",
    "completedAt",
    "updatedAt",
    "createdAt",
    "version"
   ],
   "properties": {
    "completedAt": {
     "type": "integer",
     "format": "int64"
    },
    "createdAt": {
     "type": "integer",
     "format": "int64"
    },
    "jobId": {
     "type": "string"
    },
    "operation": {
     "type": "string"
    },
    "startedAt": {
     "type": "integer",
     "format": "int64"
    },
    "status": {
     "type": "string",
     "enum": [
      "WAITING",
      "IN_PROGRESS",
      "CANCELING",
      "CANCELED",
      "COMPLETED",
      "REMOVING"
     ]
    },
    "updatedAt": {
     "type": "integer",
     "format": "int64"
    },
    "version": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.TargetConfig": {
   "required": [
    "type",
    "things"
   ],
   "properties": {
    "things": {
     "type": "array",
     "items": {
      "type": "string"
     }
    },
    "type": {
     "type": "string",
     "enum": [
      "THING_ID"
     ]
    }
   }
  },
  "job.Task": {
   "required": [
    "jobId",
    "taskId",
    "thingId",
    "operation",
    "forceCanceled",
    "status",
    "statusDetails",
    "progress",
    "queuedAt",
    "startedAt",
    "completedAt",
    "updatedAt",
    "createdAt",
    "version"
   ],
   "properties": {
    "completedAt": {
     "type": "integer",
     "format": "int64"
    },
    "createdAt": {
     "type": "integer",
     "format": "int64"
    },
    "forceCanceled": {
     "type": "boolean"
    },
    "jobId": {
     "type": "string"
    },
    "operation": {
     "type": "string"
    },
    "progress": {
     "type": "integer",
     "format": "byte"
    },
    "queuedAt": {
     "type": "integer",
     "format": "int64"
    },
    "startedAt": {
     "type": "integer",
     "format": "int64"
    },
    "status": {
     "type": "string",
     "enum": [
      "QUEUED",
      "SENT",
      "IN_PROGRESS",
      "FAILED",
      "SUCCEEDED",
      "CANCELED",
      "TIMED_OUT",
      "REJECTED"
     ]
    },
    "statusDetails": {
     "type": "object"
    },
    "taskId": {
     "type": "integer",
     "format": "int64"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "integer",
     "format": "int64"
    },
    "version": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.TaskPage": {
   "required": [
    "total",
    "content"
   ],
   "properties": {
    "content": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/job.TaskSummary"
     }
    },
    "total": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "job.TaskSummary": {
   "required": [
    "taskId",
    "jobId",
    "thingId",
    "operation",
    "retryAttempt",
    "status",
    "progress",
    "queuedAt",
    "startedAt",
    "completedAt",
    "updatedAt",
    "createdAt"
   ],
   "properties": {
    "completedAt": {
     "type": "integer",
     "format": "int64"
    },
    "createdAt": {
     "type": "integer",
     "format": "int64"
    },
    "jobId": {
     "type": "string"
    },
    "operation": {
     "type": "string"
    },
    "progress": {
     "type": "integer",
     "format": "byte"
    },
    "queuedAt": {
     "type": "integer",
     "format": "int64"
    },
    "retryAttempt": {
     "type": "integer",
     "format": "byte"
    },
    "startedAt": {
     "type": "integer",
     "format": "int64"
    },
    "status": {
     "type": "string",
     "enum": [
      "QUEUED",
      "SENT",
      "IN_PROGRESS",
      "FAILED",
      "SUCCEEDED",
      "CANCELED",
      "TIMED_OUT",
      "REJECTED"
     ]
    },
    "taskId": {
     "type": "integer",
     "format": "int64"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "job.TimeoutConfig": {
   "required": [
    "inProgressMinutes"
   ],
   "properties": {
    "inProgressMinutes": {
     "type": "integer",
     "format": "int32"
    }
   }
  },
  "job.UpdateReq": {
   "properties": {
    "description": {
     "type": "string"
    },
    "retryConfig": {
     "$ref": "#/definitions/job.RetryConfig"
    },
    "timeoutConfig": {
     "$ref": "#/definitions/job.TimeoutConfig"
    }
   }
  },
  "model.PageData[interface {}]": {
   "required": [
    "total",
    "content"
   ],
   "properties": {
    "content": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/model.PageData%5Binterface%20%7B%7D%5D.content"
     }
    },
    "total": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "model.PageData[interface {}].content": {},
  "model.PageData[ruff.io.tio.thing.ThingWithStatus]": {
   "required": [
    "total",
    "content"
   ],
   "properties": {
    "content": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/thing.ThingWithStatus"
     }
    },
    "total": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "rest.Resp[github.com.mochi-mqtt.server.v2.system.Info]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/system.Info"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.job.Detail]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/job.Detail"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.job.Page]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/job.Page"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.job.TaskPage]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/job.TaskPage"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.job.Task]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/job.Task"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.pkg.model.PageData[interface {}]]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/model.PageData%5Binterface%20%7B%7D%5D"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.pkg.model.PageData[ruff.io.tio.thing.ThingWithStatus]]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/model.PageData[ruff.io.tio.thing.ThingWithStatus]"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.pkg.restapi.H]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "type": "object"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.shadow.ShadowWithStatus]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/shadow.ShadowWithStatus"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.shadow.api.MethodInvokeResp]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/api.MethodInvokeResp"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.thing.Thing]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/thing.Thing"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[ruff.io.tio.thing.api.CreateBatchResp]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "$ref": "#/definitions/api.CreateBatchResp"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "rest.Resp[string]": {
   "required": [
    "code",
    "message",
    "data"
   ],
   "properties": {
    "code": {
     "type": "integer",
     "format": "int32"
    },
    "data": {
     "type": "string"
    },
    "message": {
     "type": "string"
    }
   }
  },
  "shadow.Metadata": {
   "properties": {
    "desired": {
     "type": "object"
    },
    "reported": {
     "type": "object"
    }
   }
  },
  "shadow.Shadow": {
   "required": [
    "thingId",
    "state",
    "metadata",
    "version",
    "tags",
    "updatedAt",
    "createdAt"
   ],
   "properties": {
    "createdAt": {
     "type": "string",
     "format": "date-time"
    },
    "metadata": {
     "$ref": "#/definitions/shadow.Metadata"
    },
    "state": {
     "$ref": "#/definitions/shadow.StateDR"
    },
    "tags": {
     "type": "object"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "string",
     "format": "date-time"
    },
    "version": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "shadow.ShadowWithStatus": {
   "required": [
    "tags",
    "updatedAt",
    "createdAt",
    "thingId",
    "state",
    "metadata",
    "version"
   ],
   "properties": {
    "connected": {
     "type": "boolean"
    },
    "connectedAt": {
     "type": "string",
     "format": "date-time"
    },
    "createdAt": {
     "type": "string",
     "format": "date-time"
    },
    "disconnectedAt": {
     "type": "string",
     "format": "date-time"
    },
    "metadata": {
     "$ref": "#/definitions/shadow.Metadata"
    },
    "remoteAddr": {
     "type": "string"
    },
    "state": {
     "$ref": "#/definitions/shadow.StateDR"
    },
    "tags": {
     "type": "object"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "string",
     "format": "date-time"
    },
    "version": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "shadow.StateDR": {
   "required": [
    "desired",
    "reported"
   ],
   "properties": {
    "desired": {
     "type": "object"
    },
    "reported": {
     "type": "object"
    }
   }
  },
  "shadow.StateReq": {
   "required": [
    "state",
    "clientToken",
    "version"
   ],
   "properties": {
    "clientToken": {
     "type": "string"
    },
    "state": {
     "$ref": "#/definitions/shadow.StateDR"
    },
    "version": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "shadow.TagsReq": {
   "required": [
    "tags",
    "version"
   ],
   "properties": {
    "tags": {
     "type": "object"
    },
    "version": {
     "type": "integer",
     "format": "int64"
    }
   }
  },
  "system.Info": {
   "required": [
    "version",
    "started",
    "time",
    "uptime",
    "bytes_received",
    "bytes_sent",
    "clients_connected",
    "clients_disconnected",
    "clients_maximum",
    "clients_total",
    "messages_received",
    "messages_sent",
    "messages_dropped",
    "retained",
    "inflight",
    "inflight_dropped",
    "subscriptions",
    "packets_received",
    "packets_sent",
    "memory_alloc",
    "threads"
   ],
   "properties": {
    "bytes_received": {
     "type": "integer",
     "format": "int64"
    },
    "bytes_sent": {
     "type": "integer",
     "format": "int64"
    },
    "clients_connected": {
     "type": "integer",
     "format": "int64"
    },
    "clients_disconnected": {
     "type": "integer",
     "format": "int64"
    },
    "clients_maximum": {
     "type": "integer",
     "format": "int64"
    },
    "clients_total": {
     "type": "integer",
     "format": "int64"
    },
    "inflight": {
     "type": "integer",
     "format": "int64"
    },
    "inflight_dropped": {
     "type": "integer",
     "format": "int64"
    },
    "memory_alloc": {
     "type": "integer",
     "format": "int64"
    },
    "messages_dropped": {
     "type": "integer",
     "format": "int64"
    },
    "messages_received": {
     "type": "integer",
     "format": "int64"
    },
    "messages_sent": {
     "type": "integer",
     "format": "int64"
    },
    "packets_received": {
     "type": "integer",
     "format": "int64"
    },
    "packets_sent": {
     "type": "integer",
     "format": "int64"
    },
    "retained": {
     "type": "integer",
     "format": "int64"
    },
    "started": {
     "type": "integer",
     "format": "int64"
    },
    "subscriptions": {
     "type": "integer",
     "format": "int64"
    },
    "threads": {
     "type": "integer",
     "format": "int64"
    },
    "time": {
     "type": "integer",
     "format": "int64"
    },
    "uptime": {
     "type": "integer",
     "format": "int64"
    },
    "version": {
     "type": "string"
    }
   }
  },
  "thing.Thing": {
   "required": [
    "thingId",
    "enabled",
    "authType",
    "updatedAt",
    "createdAt"
   ],
   "properties": {
    "authType": {
     "type": "string"
    },
    "authValue": {
     "type": "string"
    },
    "createdAt": {
     "type": "string",
     "format": "date-time"
    },
    "enabled": {
     "type": "boolean"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "string",
     "format": "date-time"
    }
   }
  },
  "thing.ThingWithStatus": {
   "required": [
    "createdAt",
    "thingId",
    "enabled",
    "authType",
    "updatedAt"
   ],
   "properties": {
    "authType": {
     "type": "string"
    },
    "authValue": {
     "type": "string"
    },
    "connected": {
     "type": "boolean"
    },
    "connectedAt": {
     "type": "string",
     "format": "date-time"
    },
    "createdAt": {
     "type": "string",
     "format": "date-time"
    },
    "disconnectedAt": {
     "type": "string",
     "format": "date-time"
    },
    "enabled": {
     "type": "boolean"
    },
    "remoteAddr": {
     "type": "string"
    },
    "thingId": {
     "type": "string"
    },
    "updatedAt": {
     "type": "string",
     "format": "date-time"
    }
   }
  }
 },
 "securityDefinitions": {
  "basic": {
   "type": "basic"
  }
 },
 "security": [
  {
   "basic": []
  }
 ],
 "tags": [
  {
   "name": "things"
  },
  {
   "name": "shadows"
  }
 ]
}